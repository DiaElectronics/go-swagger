// Code generated by go-swagger; DO NOT EDIT.


{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .APIPackage }}

import (
  "context"
  "crypto/tls"
  "net/http"
  "log"

  errors "github.com/go-openapi/errors"
  runtime "github.com/go-openapi/runtime"
  middleware "github.com/go-openapi/runtime/middleware"
  security "github.com/go-openapi/runtime/security"
	loads "github.com/go-openapi/loads"

  {{range .DefaultImports}}{{printf "%q" .}}
  {{end}}
  {{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
  {{end}}
)
{{ $package := .Package }}

func BuildAPI(
  spec *loads.Document,
  ServeError func(http.ResponseWriter, *http.Request, error),
  Logger func(string, ...interface{}),

  {{ range .Consumes }}{{ pascalize .Name }}Consumer func(r io.Reader, target interface{}) error,
  {{end}}
  {{ range .Produces }}{{ pascalize .Name }}Producer func(w io.Writer, data interface{}) error,
  {{end}}
  {{ range .SecurityDefinitions }}
    {{- if .IsBasicAuth }}
  {{ pascalize .ID }}Auth func(user string, pass string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error),
    {{- else if .IsAPIKeyAuth }}
  {{ pascalize .ID }}Auth func(token string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error),
    {{- else if .IsOAuth2 }}
  {{ pascalize .ID }}Auth func(token string, scopes []string) ({{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}, error),
    {{- end }}
  {{- end }}
  {{- if .SecurityDefinitions }}
  APIAuthorizer runtime.Authorizer,
  {{- end }}

  {{range .Operations}}{{ pascalize .Name }} func(params {{.Package}}.{{ pascalize .Name }}Params{{if .Authorized}}, principal {{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}{{end}}) middleware.Responder,
  {{end}}

  ServerShutdown func(),
) *{{.Package}}.{{ pascalize .Name }}API {
  api := {{.Package}}.New{{ pascalize .Name }}API(swaggerSpec)

  if ServeError != nil {
    api.ServeError = errors.ServeError
  }

  if Logger != nil {
    api.Logger = Logger
  }

  {{ range .Consumes }}
  if {{ pascalize .Name }}Consumer != nil {
    api.{{ pascalize .Name }}Consumer = runtime.ConsumerFunc({{ pascalize .Name }}Consumer)
  }
  {{end}}
  {{ range .Produces }}
  if {{ pascalize .Name }}Producer != nil {
    api.{{ pascalize .Name }}Producer = runtime.ProducerFunc({{ pascalize .Name }}Producer)
  }
  {{end}}
  {{ range .SecurityDefinitions }}
    {{- if .IsBasicAuth }}
  if {{ pascalize .ID }}Auth != nil {
    api.{{ pascalize .ID }}Auth = {{ pascalize .ID }}Auth
  }
    {{- else if .IsAPIKeyAuth }}
  if {{ pascalize .ID }}Auth != nil {
    api.{{ pascalize .ID }}Auth = {{ pascalize .ID }}Auth
  }
    {{- else if .IsOAuth2 }}
  if {{ pascalize .ID }}Auth != nil {
    api.{{ pascalize .ID }}Auth = {{ pascalize .ID }}Auth
  }
    {{- end }}
  {{- end }}
  {{- if .SecurityDefinitions }}
  if APIAuthorizer != nil {
    api.APIAuthorizer = APIAuthorizer
  }
  {{- end }}

  {{range .Operations}}
  if {{ pascalize .Name }} != nil {
    api.{{if ne .Package $package}}{{pascalize .Package}}{{end}}{{ pascalize .Name }}Handler = {{.Package}}.{{ pascalize .Name }}HandlerFunc({{ pascalize .Name }})
  }
  {{end}}

  if ServerShutdown != nil {
      api.ServerShutdown = ServerShutdown
  }

  return api
}
